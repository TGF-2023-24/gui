<?xml version="1.0" encoding="UTF-8"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:description_2="http://www.eclipse.org/sirius/table/description/1.1.0" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/description/tool/1.1.0" xmlns:validation="http://www.eclipse.org/sirius/description/validation/1.1.0" name="pnpl" version="12.0.0.2017041100">
  <ownedViewpoints name="pnpl-1" modelFileExtension="xmi">
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="Feature Model" initialisation="true" domainClass="PNPL::FeatureModel" enablePopupBars="true">
      <metamodel href="http://www.petrinets.org/#/"/>
      <validationSet name="Feature Model">
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Same Name" level="ERROR" message="Name must be unique" targetClass="PNPL::Node">
          <audits auditExpression="aql:self.eContainer().nodes->select(n | n.name = self.name)->size() = 1"/>
        </ownedRules>
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Loop Relation" level="ERROR" message="A parent node cannot be its own child." targetClass="PNPL::Relation">
          <audits auditExpression="aql:not self.Childs->includes(self.Parent)"/>
        </ownedRules>
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Unconnected Node" level="ERROR" message="Unconnected node." targetClass="PNPL::Node">
          <audits auditExpression="aql:self.eContainer().relations->exists(r | r.Childs->includes(self) or r.Parent = self)"/>
        </ownedRules>
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Parent of Multiple Relations" level="ERROR" message="Can only be parent of one relation, not multiple." targetClass="PNPL::Node">
          <audits auditExpression="aql:self.eContainer().relations->select(r | r.Parent = self)->size() &lt;= 1"/>
        </ownedRules>
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Child of Multiple Relations" level="ERROR" message="Can only be child of one relation, not multiple." targetClass="PNPL::Node">
          <audits auditExpression="aql:self.eContainer().relations->select(r | r.Childs->includes(self))->size() &lt;= 1 "/>
        </ownedRules>
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Mutual Exclusion" level="ERROR" message="Exclusion must be mutual" targetClass="PNPL::Node">
          <audits auditExpression="aql:not(self.exclude->exists(p | not(p.exclude->includes(self))))"/>
        </ownedRules>
      </validationSet>
      <defaultLayer name="Components">
        <nodeMappings name="OptionalNode" deletionDescription="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.2" labelDirectEdit="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.0" semanticCandidatesExpression="aql:self.nodes->select(p | p.mandatory=false)" domainClass="PNPL::Node">
          <style xsi:type="style:SquareDescription" showIcon="false" labelPosition="node" resizeKind="NSEW" width="12" height="4">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_green']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="MandatoryNode" deletionDescription="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.2" labelDirectEdit="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.0" semanticCandidatesExpression="aql:self.nodes->select(p | p.mandatory=true)" domainClass="PNPL::Node">
          <style xsi:type="style:SquareDescription" showIcon="false" labelPosition="node" resizeKind="NSEW" width="12" height="4">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_green']"/>
          </style>
        </nodeMappings>
        <edgeMappings name="OR-Relation" deletionDescription="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.1" semanticCandidatesExpression="aql:self.relations->select(p | p.type = PNPL::RelationType::OR)" sourceMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode']" targetMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode']" targetFinderExpression="feature:Childs" sourceFinderExpression="feature:Parent" domainClass="PNPL::Relation" useDomainElement="true" reconnections="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.3 //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.4">
          <style sourceArrow="InputFillClosedArrow" targetArrow="NoDecoration" sizeComputationExpression="2" endsCentering="Both">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ANDMandatory-Relation" deletionDescription="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.1" semanticCandidatesExpression="aql:self.relations->select(p | p.type = PNPL::RelationType::AND)" sourceMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode']" targetMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode']" targetFinderExpression="feature:Childs" sourceFinderExpression="feature:Parent" domainClass="PNPL::Relation" useDomainElement="true" reconnections="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.3 //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.4">
          <style targetArrow="FillDiamond" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ANDOptional-Relation" deletionDescription="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.1" semanticCandidatesExpression="aql:self.relations->select(p | p.type = PNPL::RelationType::AND)" sourceMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode']" targetMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode']" targetFinderExpression="feature:Childs" sourceFinderExpression="feature:Parent" domainClass="PNPL::Relation" useDomainElement="true" reconnections="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.3 //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.4">
          <style targetArrow="Diamond" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ALTERNATIVE-Relation" deletionDescription="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.1" semanticCandidatesExpression="aql:self.relations->select(p | p.type = PNPL::RelationType::ALTERNATIVE)" sourceMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode']" targetMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode']" targetFinderExpression="feature:Childs" sourceFinderExpression="feature:Parent" domainClass="PNPL::Relation" useDomainElement="true" reconnections="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.3 //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.4">
          <style sourceArrow="InputClosedArrow" targetArrow="NoDecoration" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <toolSections name="Create">
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Optional Node" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::Node" referenceName="nodes">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="mandatory" valueExpression="aql:false"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Node'+container.nodes->filter(PNPL::Node)->size()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Mandatory Node" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::Node" referenceName="nodes">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="mandatory" valueExpression="aql:true"/>
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'Node'+container.nodes->filter(PNPL::Node)->size()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="OR Relation" precondition="aql:preTarget.differs(preSource)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@edgeMappings[name='OR-Relation']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer()">
                <subModelOperations xsi:type="tool_1:Switch">
                  <cases conditionExpression="aql:self.relations->exists(p | p.Parent=source and p.type = PNPL::RelationType::OR)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.relations->select(p | p.Parent=source)->first()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer().relations->select(p | p.Parent=preSource)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="Childs" valueExpression="var:target"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:source.requires"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="var:source"/>
                    </subModelOperations>
                  </cases>
                  <cases conditionExpression="aql:not self.relations->exists(p | p.Parent=source)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::Relation" referenceName="relations">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="Parent" valueExpression="var:source"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="Childs" valueExpression="var:target"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="type" valueExpression="aql:PNPL::RelationType::OR"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:source.requires"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="var:source"/>
                      </subModelOperations>
                    </subModelOperations>
                  </cases>
                  <default/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="ANDMandatory Relation" precondition="aql:preTarget.differs(preSource)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@edgeMappings[name='ANDMandatory-Relation']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer()">
                <subModelOperations xsi:type="tool_1:Switch">
                  <cases conditionExpression="aql:self.relations->exists(p | p.Parent=source and p.type = PNPL::RelationType::AND)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.relations->select(p | p.Parent=source)->first()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer().relations->select(p | p.Parent=preSource)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="Childs" valueExpression="var:target"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:source.requires"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="var:source"/>
                    </subModelOperations>
                  </cases>
                  <cases conditionExpression="aql:not self.relations->exists(p | p.Parent=source)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::Relation" referenceName="relations">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="Parent" valueExpression="var:source"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="Childs" valueExpression="var:target"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="type" valueExpression="aql:PNPL::RelationType::AND"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:source.requires"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="var:source"/>
                      </subModelOperations>
                    </subModelOperations>
                  </cases>
                  <default/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="ANDOptional Relation" precondition="aql:preTarget.differs(preSource)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@edgeMappings[name='ANDOptional-Relation']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer()">
                <subModelOperations xsi:type="tool_1:Switch">
                  <cases conditionExpression="aql:self.relations->exists(p | p.Parent=source and p.type = PNPL::RelationType::AND)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.relations->select(p | p.Parent=source)->first()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer().relations->select(p | p.Parent=preSource)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="Childs" valueExpression="var:target"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:source.requires"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="var:source"/>
                    </subModelOperations>
                  </cases>
                  <cases conditionExpression="aql:not self.relations->exists(p | p.Parent=source)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::Relation" referenceName="relations">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="Parent" valueExpression="var:source"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="Childs" valueExpression="var:target"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="type" valueExpression="aql:PNPL::RelationType::AND"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:source.requires"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="var:source"/>
                      </subModelOperations>
                    </subModelOperations>
                  </cases>
                  <default/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="ALTERNATIVE Relation" precondition="aql:preTarget.differs(preSource)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@edgeMappings[name='ALTERNATIVE-Relation']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer()">
                <subModelOperations xsi:type="tool_1:Switch">
                  <cases conditionExpression="aql:self.relations->exists(p | p.Parent=source and p.type = PNPL::RelationType::ALTERNATIVE)">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.relations->select(p | p.Parent=source)->first()">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer().relations->select(p | p.Parent=preSource)">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="Childs" valueExpression="var:target"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:source.requires"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="var:source"/>
                    </subModelOperations>
                  </cases>
                  <cases conditionExpression="aql:not self.relations->exists(p | p.Parent=source)">
                    <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::Relation" referenceName="relations">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="Parent" valueExpression="var:source"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="Childs" valueExpression="var:target"/>
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="type" valueExpression="aql:PNPL::RelationType::ALTERNATIVE"/>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:target">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:source.requires"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="var:source"/>
                      </subModelOperations>
                    </subModelOperations>
                  </cases>
                  <default/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Edit">
            <tools xsi:type="tool:DirectEditLabel" name="editNodeName" forceRefresh="true">
              <mask mask="{0}"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:0"/>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:DeleteElementDescription" name="Delete Relation">
              <element name="element"/>
              <elementView name="elementView"/>
              <containerView name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                  <subModelOperations xsi:type="tool_1:For" expression="aql:self.oclAsType(PNPL::Relation).Childs" iteratorName="child">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:child.requires">
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:child">
                        <subModelOperations xsi:type="tool_1:Unset" featureName="requires" elementExpression="aql:child.requires->last()"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:RemoveElement"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:DeleteElementDescription" name="Delete Node" forceRefresh="true">
              <element name="element"/>
              <elementView name="elementView"/>
              <containerView name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainer().relations->exists(p|p.Childs->includes(self))">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer().relations->select(r | r.Childs->includes(self))->first()">
                      <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.Childs->size()=1">
                        <subModelOperations xsi:type="tool_1:RemoveElement"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainer().relations->exists(p|p.Parent->includes(self))">
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer().relations->select(r | r.Parent->includes(self))->first()">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:RemoveElement"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ReconnectEdgeDescription" name="Reconnect Father" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
              <source name="source"/>
              <target name="target"/>
              <sourceView name="sourceView"/>
              <targetView name="targetView"/>
              <element name="element"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:(not element.eContainer().relations->exists(p|p.Parent=target))">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:otherEnd">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:element.Childs" iteratorName="child">
                      <subModelOperations xsi:type="tool_1:For" expression="aql:child.requires">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:child">
                          <subModelOperations xsi:type="tool_1:Unset" featureName="requires" elementExpression="aql:self.requires->last()"/>
                        </subModelOperations>
                      </subModelOperations>
                      <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aqlchild">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:target.requires"/>
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="var:target"/>
                      </subModelOperations>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                      <subModelOperations xsi:type="tool_1:Unset" featureName="Parent" elementExpression="var:source">
                        <subModelOperations xsi:type="tool_1:SetValue" featureName="Parent" valueExpression="var:target"/>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <edgeView name="edgeView"/>
            </tools>
            <tools xsi:type="tool:ReconnectEdgeDescription" name="Reconnect Child" forceRefresh="true">
              <source name="source"/>
              <target name="target"/>
              <sourceView name="sourceView"/>
              <targetView name="targetView"/>
              <element name="element"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:If" conditionExpression="aql:not element.eContainer().relations->exists(p|p.Childs->exists(myNode | myNode=target))">
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="Childs" elementExpression="var:source"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="Childs" valueExpression="var:target"/>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:source.requires"/>
                    </subModelOperations>
                    <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                      <subModelOperations xsi:type="tool_1:For" expression="aql:self.requires">
                        <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                          <subModelOperations xsi:type="tool_1:Unset" featureName="requires" elementExpression="aql:self.requires->last()"/>
                        </subModelOperations>
                      </subModelOperations>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <edgeView name="edgeView"/>
            </tools>
          </ownedTools>
        </toolSections>
      </defaultLayer>
      <additionalLayers name="Legend" activeByDefault="true">
        <nodeMappings name="Legend" domainClass="PNPL::FeatureModel">
          <style xsi:type="style:WorkspaceImageDescription" labelSize="1" showIcon="false" labelExpression="Legend" iconPath="/pnpl.design/icons/Legend-FeatureModel.png" hideLabelByDefault="true" sizeComputationExpression="40" resizeKind="NSEW" workspacePath="/pnpl.design/icons/legendFM.png">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
      </additionalLayers>
      <additionalLayers name="Requires/Excludes" activeByDefault="true">
        <edgeMappings name="Requires" sourceMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode']" targetMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode']" targetFinderExpression="aql:self.getRequiresExcludingParents()" reconnections="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@additionalLayers[name='Requires%2FExcludes']/@toolSections.0/@ownedTools[name='Edit']/@tools.0">
          <style lineStyle="dash" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
        </edgeMappings>
        <edgeMappings name="Excludes" sourceMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode']" targetMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='OptionalNode'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@defaultLayer/@nodeMappings[name='MandatoryNode']" targetFinderExpression="aql:self.exclude->select(e | e.exclude->includes(self) and self.name &lt; e.name)" reconnections="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@additionalLayers[name='Requires%2FExcludes']/@toolSections.0/@ownedTools[name='Edit']/@tools.1">
          <style lineStyle="dash" sourceArrow="InputArrow" sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
          </style>
        </edgeMappings>
        <toolSections name="Create">
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="Requires" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@additionalLayers[name='Requires%2FExcludes']/@edgeMappings[name='Requires']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:target"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="Excludes" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Feature%20Model']/@additionalLayers[name='Requires%2FExcludes']/@edgeMappings[name='Excludes']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="exclude" valueExpression="aql:target"/>
                <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="exclude" valueExpression="aql:source"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Edit">
            <tools xsi:type="tool:ReconnectEdgeDescription" name="Requires Target" forceRefresh="true">
              <source name="source"/>
              <target name="target"/>
              <sourceView name="sourceView"/>
              <targetView name="targetView"/>
              <element name="element"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                  <subModelOperations xsi:type="tool_1:Unset" featureName="requires" elementExpression="aql:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="requires" valueExpression="aql:target"/>
                </firstModelOperations>
              </initialOperation>
              <edgeView name="edgeView"/>
            </tools>
            <tools xsi:type="tool:ReconnectEdgeDescription" name="Excludes Target" forceRefresh="true">
              <source name="source"/>
              <target name="target"/>
              <sourceView name="sourceView"/>
              <targetView name="targetView"/>
              <element name="element"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                  <subModelOperations xsi:type="tool_1:Unset" featureName="exclude" elementExpression="var:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="exclude" valueExpression="aql:target"/>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:source">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="exclude" elementExpression="var:element"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:target">
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="exclude" valueExpression="aql:element"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <edgeView name="edgeView"/>
            </tools>
          </ownedTools>
        </toolSections>
      </additionalLayers>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_1:DiagramDescription" dropDescriptions="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.6 //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.8" name="pn-150" domainClass="PNPL::PetriNet" enablePopupBars="true">
      <metamodel href="http://www.petrinets.org/#/"/>
      <validationSet>
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Same Name" level="ERROR" message="Name must be unique." targetClass="PNPL::Element">
          <audits auditExpression="aql:self.eContainer().elements->select(n | n.name = self.name)->size() = 1"/>
        </ownedRules>
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Unconnected Element" level="ERROR" message="Unconnected element." targetClass="PNPL::Element">
          <audits auditExpression="aql:(self.oclIsTypeOf(PNPL::Place) or self.oclIsTypeOf(PNPL::Transition))&#xD;implies (self.eContainer().elements->select(e | e.oclIsTypeOf(PNPL::ArcPT) or e.oclIsTypeOf(PNPL::ArcTP))->exists(a | a.source = self or a.target = self))&#xD;"/>
        </ownedRules>
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Positive Tokens" level="ERROR" message="Number of tokens cannot be less than 0." targetClass="PNPL::Place">
          <audits auditExpression="aql:self.tokens >= 0"/>
        </ownedRules>
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Positive Weight" level="ERROR" message="The value must be 1 or greater." targetClass="PNPL::Arc">
          <audits auditExpression="aql:self.weight >0"/>
        </ownedRules>
        <ownedRules xsi:type="validation:SemanticValidationRule" name="Not empty" level="ERROR" message="Must have at least one associated element." targetClass="PNPL::PresenceCondition">
          <audits auditExpression="aql:self.eContainer().pn_150.elements->exists(e | e.presenceCondition = self)"/>
        </ownedRules>
      </validationSet>
      <defaultLayer name="Components" label="Components">
        <nodeMappings name="Place" deletionDescription="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.3" labelDirectEdit="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.0" semanticCandidatesExpression="aql:self.eContainer().pn_150.elements->select(e | e.presenceCondition = null)" domainClass="PNPL::Place">
          <style xsi:type="style:DotDescription" borderSizeComputationExpression="2" showIcon="false" labelAlignment="RIGHT" resizeKind="NSEW">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
          <conditionnalStyles predicateExpression="aql:self.tokens=1">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot01.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.tokens=2">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot2.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.tokens=3">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot3.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.tokens=4">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot4.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.tokens=5">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot5.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
          <conditionnalStyles predicateExpression="aql:self.tokens>5">
            <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot6.png">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </conditionnalStyles>
        </nodeMappings>
        <nodeMappings name="Transition" deletionDescription="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.4" labelDirectEdit="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.0" semanticCandidatesExpression="aql:self.eContainer().pn_150.elements->select(e | e.presenceCondition = null)" domainClass="PNPL::Transition">
          <style xsi:type="style:SquareDescription" showIcon="false" resizeKind="NSEW" width="3" height="7">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
          </style>
        </nodeMappings>
        <edgeMappings name="ArcTP" sourceMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='TransitionPc'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Transition']" targetMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='PlacePc'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Place']" targetFinderExpression="feature:target" sourceFinderExpression="feature:source" domainClass="PNPL::ArcTP" useDomainElement="true" reconnections="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.1 //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.2">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.weight">
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="ArcPT" sourceMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='PlacePc'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Place']" targetMapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='TransitionPc'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Transition']" targetFinderExpression="feature:target" sourceFinderExpression="feature:source" domainClass="PNPL::ArcPT" useDomainElement="true" reconnections="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.1 //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.2">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription showIcon="false" labelExpression="aql:self.weight">
              <labelFormat>bold</labelFormat>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <containerMappings name="PresenceConditions" synchronizationLock="true" domainClass="PNPL::PresenceCondition" dropDescriptions="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.5 //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.7">
          <subNodeMappings name="PlacePc" label="PlacePc" labelDirectEdit="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.0" semanticCandidatesExpression="aql:self.eContainer().pn_150.elements->select(e | e.presenceCondition = self)" domainClass="PNPL::Place">
            <style xsi:type="style:DotDescription" borderSizeComputationExpression="2" showIcon="false" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            </style>
            <conditionnalStyles predicateExpression="aql:self.tokens=1">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot01.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.tokens=2">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot2.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.tokens=3">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot3.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.tokens=4">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot4.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.tokens=5">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot5.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
            <conditionnalStyles predicateExpression="aql:self.tokens>5">
              <style xsi:type="style:WorkspaceImageDescription" showIcon="false" sizeComputationExpression="-1" resizeKind="NSEW" workspacePath="/pnpl.design/icons/dot6.png">
                <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
                <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              </style>
            </conditionnalStyles>
          </subNodeMappings>
          <subNodeMappings name="TransitionPc" labelDirectEdit="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@toolSections.0/@ownedTools[name='Edit']/@tools.0" semanticCandidatesExpression="aql:self.eContainer().pn_150.elements->select(e | e.presenceCondition = self)" domainClass="PNPL::Transition">
            <style xsi:type="style:SquareDescription" showIcon="false" resizeKind="NSEW" width="3" height="7">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </style>
          </subNodeMappings>
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="3" borderLineStyle="dot" showIcon="false" labelExpression="feature:id" widthComputationExpression="" heightComputationExpression="">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_red']"/>
            <labelFormat>italic</labelFormat>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='white']"/>
          </style>
        </containerMappings>
        <toolSections name="Creation">
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Place" forceRefresh="true" nodeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='PlacePc'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Place']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::Place" referenceName="elements">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'p_'+container.elements->filter(PNPL::Place)->size()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:NodeCreationDescription" name="Transition" inverseSelectionOrder="true" nodeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='TransitionPc'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Transition']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::Transition" referenceName="elements">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:'t_'+container.elements->filter(PNPL::Place)->size()"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ContainerCreationDescription" name="Presence Conditions" forceRefresh="true" containerMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:container.eContainer().oclAsType(PNPL::pnpl)">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::PresenceCondition" referenceName="presencecondition">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="id" valueExpression="aql:'PC ' + container.eContainer().oclAsType(PNPL::pnpl).presencecondition->filter(PNPL::PresenceCondition)->size()"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="ArcTP" precondition="aql:preTarget.differs(preSource)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@edgeMappings[name='ArcTP']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::ArcTP" referenceName="elements">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:target"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="weight" valueExpression="1"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.source.name+'-'+self.target.name"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="presenceCondition" valueExpression="aql:self.source.presenceCondition"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:EdgeCreationDescription" name="ArcPT" precondition="aql:preTarget.differs(preSource)" forceRefresh="true" edgeMappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@edgeMappings[name='ArcPT']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:self.eContainer()">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="PNPL::ArcPT" referenceName="elements">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:source"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:target"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="weight" valueExpression="1"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="aql:self.source.name+'-'+self.target.name"/>
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="presenceCondition" valueExpression="aql:self.target.presenceCondition"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:ToolGroup" name="Edit">
            <tools xsi:type="tool:DirectEditLabel" name="editName" forceRefresh="true">
              <mask mask="{0}"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:SetValue" featureName="name" valueExpression="var:0"/>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ReconnectEdgeDescription" name="Reconnect Arcs Target" forceRefresh="true">
              <source name="source"/>
              <target name="target"/>
              <sourceView name="sourceView"/>
              <targetView name="targetView"/>
              <element name="element"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element.source.oclIsTypeOf(PNPL::Place) and element.target.oclIsTypeOf(PNPL::Transition)">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="target"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element.source.oclIsTypeOf(PNPL::Transition) and element.target.oclIsTypeOf(PNPL::Place)">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="target"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:target"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <edgeView name="edgeView"/>
            </tools>
            <tools xsi:type="tool:ReconnectEdgeDescription" name="Reconnect Arcs Source" forceRefresh="true" reconnectionKind="RECONNECT_SOURCE">
              <source name="source"/>
              <target name="target"/>
              <sourceView name="sourceView"/>
              <targetView name="targetView"/>
              <element name="element"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element.source.oclIsTypeOf(PNPL::Place) and element.target.oclIsTypeOf(PNPL::Transition)">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="source"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:target"/>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:element.source.oclIsTypeOf(PNPL::Transition) and element.target.oclIsTypeOf(PNPL::Place)">
                    <subModelOperations xsi:type="tool_1:Unset" featureName="source"/>
                    <subModelOperations xsi:type="tool_1:SetValue" featureName="source" valueExpression="var:target"/>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
              <edgeView name="edgeView"/>
            </tools>
            <tools xsi:type="tool:DeleteElementDescription" name="Delete Place" forceRefresh="true">
              <element name="element"/>
              <elementView name="elementView"/>
              <containerView name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainer().elements->filter(PNPL::ArcPT)->exists(p | p.source = self)">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.eContainer().elements->filter(PNPL::ArcPT)->select(p | p.source = self)" iteratorName="arcs">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainer().elements->filter(PNPL::ArcTP)->exists(p | p.target = self)">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.eContainer().elements->filter(PNPL::ArcTP)->select(p | p.target = self)" iteratorName="arcs">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:RemoveElement"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:DeleteElementDescription" name="Delete Transition" forceRefresh="true">
              <element name="element"/>
              <elementView name="elementView"/>
              <containerView name="containerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:element">
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainer().elements->filter(PNPL::ArcPT)->exists(p|p.target->includes(self))">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.eContainer().elements->filter(PNPL::ArcPT)->select(p|p.target->includes(self))" iteratorName="arcs">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainer().elements->filter(PNPL::ArcTP)->exists(p|p.source->includes(self))">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.eContainer().elements->filter(PNPL::ArcTP)->select(p|p.source->includes(self))" iteratorName="arcs">
                      <subModelOperations xsi:type="tool_1:RemoveElement"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:RemoveElement"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerDropDescription" name="Place PC in" forceRefresh="true" mappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Place'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='PlacePc']" moveEdges="true">
              <oldContainer name="oldSemanticContainer"/>
              <newContainer name="newSemanticContainer"/>
              <element name="element"/>
              <newViewContainer name="newContainerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="presenceCondition" valueExpression="aql:newSemanticContainer.oclAsType(PNPL::PresenceCondition)"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerDropDescription" name="Place PC out" forceRefresh="true" mappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Place'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='PlacePc']">
              <oldContainer name="oldSemanticContainer"/>
              <newContainer name="newSemanticContainer"/>
              <element name="element"/>
              <newViewContainer name="newContainerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.oclAsType(PNPL::Place)">
                  <subModelOperations xsi:type="tool_1:Unset" featureName="presenceCondition"/>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerDropDescription" name="Transition PC in" forceRefresh="true" mappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='TransitionPc'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Transition']" moveEdges="true">
              <oldContainer name="oldSemanticContainer"/>
              <newContainer name="newSemanticContainer"/>
              <element name="element"/>
              <newViewContainer name="newContainerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.oclAsType(PNPL::Transition)">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="presenceCondition" valueExpression="aql:newSemanticContainer.oclAsType(PNPL::PresenceCondition)"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainer().elements->filter(PNPL::ArcTP)->exists(p | p.source = self)">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.eContainer().elements->filter(PNPL::ArcTP)->select(p | p.source = self)" iteratorName="arcs">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="presenceCondition" valueExpression="aql:newSemanticContainer.oclAsType(PNPL::PresenceCondition)"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainer().elements->filter(PNPL::ArcPT)->exists(p | p.target = self)">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.eContainer().elements->filter(PNPL::ArcPT)->select(p | p.target = self)" iteratorName="arcs">
                      <subModelOperations xsi:type="tool_1:SetValue" featureName="presenceCondition" valueExpression="aql:newSemanticContainer.oclAsType(PNPL::PresenceCondition)"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
            <tools xsi:type="tool:ContainerDropDescription" name="Transition PC out" forceRefresh="true" mappings="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Transition'] //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='TransitionPc']">
              <oldContainer name="oldSemanticContainer"/>
              <newContainer name="newSemanticContainer"/>
              <element name="element"/>
              <newViewContainer name="newContainerView"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="aql:element.oclAsType(PNPL::Transition)">
                  <subModelOperations xsi:type="tool_1:Unset" featureName="presenceCondition"/>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainer().elements->filter(PNPL::ArcTP)->exists(p | p.source = self)">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.eContainer().elements->filter(PNPL::ArcTP)->select(p | p.source = self)" iteratorName="arcs">
                      <subModelOperations xsi:type="tool_1:Unset" featureName="presenceCondition"/>
                    </subModelOperations>
                  </subModelOperations>
                  <subModelOperations xsi:type="tool_1:If" conditionExpression="aql:self.eContainer().elements->filter(PNPL::ArcPT)->exists(p | p.target = self)">
                    <subModelOperations xsi:type="tool_1:For" expression="aql:self.eContainer().elements->filter(PNPL::ArcPT)->select(p | p.target = self)" iteratorName="arcs">
                      <subModelOperations xsi:type="tool_1:Unset" featureName="presenceCondition"/>
                    </subModelOperations>
                  </subModelOperations>
                </firstModelOperations>
              </initialOperation>
            </tools>
          </ownedTools>
        </toolSections>
        <customization>
          <vsmElementCustomizations xsi:type="description:VSMElementCustomization" predicateExpression="aql:self.oclAsType(PNPL::Place).tokens>5">
            <featureCustomizations xsi:type="description:EAttributeCustomization" appliedOn="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Place']/@conditionnalStyles.5/@style //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@nodeMappings[name='Place']/@style //@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='pn-150']/@defaultLayer/@containerMappings[name='PresenceConditions']/@subNodeMappings[name='PlacePc']/@conditionnalStyles.5/@style" attributeName="labelExpression" value="aql:'('+self.oclAsType(PNPL::Place).tokens+') '+ self.oclAsType(PNPL::Place).name"/>
          </vsmElementCustomizations>
        </customization>
      </defaultLayer>
    </ownedRepresentations>
    <ownedRepresentations xsi:type="description_2:EditionTableDescription" name="Presence Conditions" initialisation="true" showOnStartup="true" domainClass="PNPL::pnpl">
      <metamodel href="http://www.petrinets.org/#/"/>
      <ownedLineMappings name="Lines" domainClass="PNPL::PresenceCondition"/>
      <ownedCreateLine name="createPC" label="New Presence Condition" forceRefresh="true" mapping="//@ownedViewpoints[name='pnpl-1']/@ownedRepresentations[name='Presence%20Conditions']/@ownedLineMappings[name='Lines']">
        <variables name="root" documentation="The semantic root element of the table."/>
        <variables name="element" documentation="The semantic currently edited element."/>
        <variables name="container" documentation="The semantic element corresponding to the view container."/>
        <firstModelOperation xsi:type="tool_1:CreateInstance" typeName="PNPL::PresenceCondition" referenceName="presencecondition">
          <subModelOperations xsi:type="tool_1:SetValue" featureName="id" valueExpression="aql:'PC ' + container.presencecondition->filter(PNPL::PresenceCondition)->size()"/>
        </firstModelOperation>
      </ownedCreateLine>
      <ownedColumnMappings name="Expression" headerLabelExpression="Expression" canEdit="true" featureName="expression" labelExpression="aql:self.expression.parseExpression()"/>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="pnpl.design.Services"/>
  </ownedViewpoints>
</description:Group>
